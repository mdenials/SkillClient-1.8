package com.skillclient.modules.exploit;

import java.util.Scanner;
import java.net.URL;
import net.minecraft.network.Packet;
import com.skillclient.wrapper.SkillWrapper;
import net.minecraft.network.play.client.C01PacketChatMessage;
import com.skillclient.events.EventUpdate;
import com.skillclient.events.api.EventTarget;
import net.minecraft.network.play.server.S02PacketChat;
import com.skillclient.events.EventPacketReceived;
import java.util.ArrayList;
import com.skillclient.main.Register;
import java.util.List;
import com.skillclient.utils.TimerUtil;
import com.skillclient.misc.Module;

public class AnticheatDetection extends Module
{
    private TimerUtil tickTimer;
    List<String> messages;
    String unknown_cmd;
    int state;
    AnticheatDetection.AntiCheat[] acs;
    
    public AnticheatDetection() {
        super("AnticheatDetection", Register.Category.EXPLOIT, "Tries to get Anticheat");
        this.tickTimer = new TimerUtil();
        this.messages = new ArrayList<String>();
        this.unknown_cmd = "";
        this.state = 0;
        this.acs = new AnticheatDetection.AntiCheat[0];
    }
    
    @EventTarget
    public void onSend(final EventPacketReceived event) {
        try {
            if (event.getPacket() instanceof S02PacketChat) {
                final String message = ((S02PacketChat)event.getPacket()).getChatComponent().getUnformattedText();
                if (this.state == 1) {
                    this.messages.add(message);
                }
                else if (this.state == 2) {
                    if (this.messages.contains(message) && this.unknown_cmd == null) {
                        this.unknown_cmd = message;
                        AnticheatDetection.sc.chat.chat("Searching for: " + this.unknown_cmd);
                    }
                }
                else {
                    if (message.equals(this.unknown_cmd)) {
                        this.acs[this.state - 3].available = false;
                    }
                    System.out.println("state: " + this.state);
                }
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @EventTarget
    public void onUpdate(final EventUpdate event) {
        if (this.tickTimer.hasReached(5000.0f)) {
            this.tickTimer.reset();
            ++this.state;
            if (this.state == 2) {
                SkillWrapper.sendPacket((Packet)new C01PacketChatMessage("/thisCommandDoesNotExistEither"));
            }
            else if (this.state - 3 < this.acs.length) {
                SkillWrapper.sendPacket((Packet)new C01PacketChatMessage("/" + this.acs[this.state - 3].cmd));
            }
            else {
                AnticheatDetection.sc.chat.chat("");
                AnticheatDetection.sc.chat.chat("Anticheats: ");
                AnticheatDetection.AntiCheat[] acs;
                for (int length = (acs = this.acs).length, i = 0; i < length; ++i) {
                    final AnticheatDetection.AntiCheat ac = acs[i];
                    AnticheatDetection.sc.chat.chat(" - " + ac.toString());
                }
                AnticheatDetection.sc.chat.chat("");
                this.onDisable();
            }
        }
    }
    
    public void onEnable() {
        super.onEnable();
        SkillWrapper.sendPacket((Packet)new C01PacketChatMessage("/thisCommandDoesNotExist"));
        this.tickTimer.reset();
        this.state = 1;
        this.unknown_cmd = null;
        this.messages.clear();
        try {
            final URL url = new URL("https://raw.githubusercontent.com/MCmodding4K/SkillClient/master/anticheats");
            final Scanner scanner = new Scanner(url.openStream());
            final ArrayList<AnticheatDetection.AntiCheat> temp = new ArrayList<AnticheatDetection.AntiCheat>();
            while (scanner.hasNextLine()) {
                temp.add(new AnticheatDetection.AntiCheat(scanner.nextLine().split(":")));
            }
            scanner.close();
            this.acs = temp.toArray(new AnticheatDetection.AntiCheat[temp.size()]);
        }
        catch (Exception e) {
            e.printStackTrace();
            AnticheatDetection.sc.chat.chat("Failed");
        }
    }
    
    public void onDisable() {
        super.onDisable();
        this.state = 0;
    }
    
    public String getDisplayName() {
        return String.valueOf(super.getDisplayName()) + (this.isActive() ? (" [" + (3 + this.acs.length - this.state) * 5 + "s left]") : "");
    }
}

